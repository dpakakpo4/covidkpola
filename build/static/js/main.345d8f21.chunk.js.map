{"version":3,"sources":["util.js","InfoBox.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","InfoBox","title","active","isRed","isPurple","total","num","props","Card","onClick","className","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.345d8f21.chunk.js","sourcesContent":["import React from 'react'\nimport numeral from 'numeral'\nimport {Circle,Popup} from 'react-leaflet'\nimport './Map.css'\n\nconst casesTypeColors = {\n    cases :{\n        hex: \"#ffc400\",\n        multiplier: 800,\n    },\n    recovered:{\n        hex: \"#00c853\",\n        multiplier: 1200,\n    },\n    deaths:{\n        hex: \"#6200ea\",\n        multiplier: 2000\n    }\n}\n\nexport const sortData = (data) =>{\n    const sortedData = [...data];\n\n    sortedData.sort((a,b)=>(a.cases>b.cases ? -1: 1))\n    return sortedData;\n}\n\nexport const showDataOnMap = (data,casesType = \"cases\")=>\n    data.map((country)=>(\n        <Circle \n        center={[country.countryInfo.lat,country.countryInfo.long]}\n        fillOpacity={0.4}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={\n            Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\n        }\n        >\n         \n        <Popup>\n            <div className=\"info-container\">\n                <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}\n                ></div>\n                <div className=\"info-name\">\n                    {country.country}\n                </div>\n                <div className=\"info-confirmed\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                </div>\n                <div className=\"info-recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                </div>\n                <div className=\"info-deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                </div>\n                <div></div>\n            </div>\n        </Popup>   \n        </Circle>\n    ))\n\nexport const prettyPrintStat = (stat)=> stat ? `+${numeral(stat).format('0.0a')}`: \"+0\"","import React from 'react'\nimport {Card, CardContent,Typography} from \"@material-ui/core\"\nimport './InfoBox.css'\nimport  {prettyPrintStat} from  './util'\n\nfunction InfoBox({title,cases,active,isRed,isPurple,total,num,...props}){\n    return (\n        \n        <Card onClick={props.onClick} className={`infobox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'} ${isPurple && 'infoBox--purple'}`}>\n            <CardContent  >\n                {/*Title*/}\n                <Typography className={`infoBox__title`} color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                {/* 120k Number of cases */}\n                <h2 className={`infoBox__cases${num}`}>{prettyPrintStat(cases)}</h2>\n\n                {/*1.2M Total */}\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {prettyPrintStat(total)} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport {Map as LeafletMap,TileLayer} from \"react-leaflet\"\nimport \"./Map.css\"\nimport { showDataOnMap } from './util'\n\nfunction Map({countries,casesType,center,zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'> \n                </TileLayer>\n                {showDataOnMap(countries,casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport \"./Table.css\"\n\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country,cases}) =>(\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{cases}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React,{useState,useEffect} from 'react'\nimport {Line} from 'react-chartjs-2'\nimport numeral from 'numeral'\nconst options = {\n    legend:{\n        display: false\n    },\n    elements: {\n        point:{\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks:{\n            label: function(tooltipItem,data){\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            },\n        },\n    },\n    scales:{\n        xAxes:[\n            {\n                type: \"time\",\n                time:{\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines : {\n                    display:false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function(value, index, values){\n                        return numeral(value).format(\"0a\")\n                    },\n                },\n            },\n        ],\n    }\n}\n\nfunction LineGraph({casesType= \"cases\"}) {\n    const  [data,setData] = useState({})\n\n    \n\n    const buildChartData = (data, casesType) =>{\n        let  chartData = [];\n        let lastDataPoint;\n\n        for(let date in data.cases){\n            if(lastDataPoint){\n                let newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date]\n        }\n\n        return chartData\n    }\n    useEffect(()=>{\n        const fetchData = async () =>{\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then((response) =>response.json())\n            .then((data)=>{\n                let chartData = buildChartData(data, casesType)\n                setData(chartData)\n            })\n        }\n\n        fetchData()\n    },[casesType])\n\n    return (\n        <div>\n            {data?.length >0 && (\n                <Line \n                options={options}\n                data = {{\n                    datasets: [\n                        {\n                            backgroundColor: \"rgba(102,102,255,0.5\",\n                            borderColor: \"#CC1034\",\n                            data:data,\n                        },\n                    ],\n                }}\n                />\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport { Card, CardContent, FormControl,MenuItem,Select } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData} from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo,setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({lat:34.80746,lng:-40.4796})\n  const [mapZoom, setMapZoom] = useState(3)\n  const [casesType, setCasesType] = useState(\"cases\")\n  const [mapCountries, setMapCountries] = useState([])\n\n  useEffect(()=>{\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response)=>response.json())\n      .then((data)=>{\n        setCountryInfo(data)\n      })\n  },[])\n\n  useEffect(()=>{\n    // async task to get countries\n    const getCountriesData  = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name:country.country, // United States, United Kingdom\n            value:country.countryInfo.iso2 //UK, USA, TG\n          }\n        ))\n\n        const sortedData = sortData(data)\n        setTableData(sortedData)\n        setCountries(countries)\n        setMapCountries(data)\n      })\n    }\n\n    getCountriesData()\n  },[])\n\n\n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value\n\n    const url = countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data=>{\n      setCountry(countryCode)\n\n      // All of the data\n      // from the country response\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapZoom(5)\n    })\n  }\n\n\n  console.log(\"Country info>>>\",countryInfo)\n  return (\n    <div className=\"app dark-mode\">\n      \n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1 className=\"\">COVID-19 KPOLA</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {\n              countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))\n            }\n\n            {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">Option two</MenuItem>\n            <MenuItem value=\"worldwide\">Option 3</MenuItem>\n            <MenuItem value=\"worldwide\">Option 4</MenuItem> */}\n\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className=\"app__stats\">\n          <InfoBox isRed active={casesType==='cases'} onClick={(e)=>setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} num={1}/>\n\n          <InfoBox active={casesType==='recovered'} onClick={(e)=>setCasesType(\"recovered\")} title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} num={2}/>\n\n          <InfoBox isPurple active={casesType==='deaths'} onClick={(e)=>setCasesType(\"deaths\")} title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} num={3}/>\n      </div>\n\n      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n\n          {/* Table */}\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          {/* Graph */}\n          <LineGraph  casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}